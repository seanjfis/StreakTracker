{"ast":null,"code":"var _jsxFileName = \"/Users/seanfiscus/Desktop/streak-tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ActivityList from './components/ActivityList';\nimport ActivityDetails from './components/ActivityDetails';\nimport ActivityForm from './components/ActivityForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [activities, setActivities] = useState(() => {\n    const storedActivities = JSON.parse(localStorage.getItem('activities'));\n    return storedActivities || [];\n  });\n  const [selectedActivity, setSelectedActivity] = useState(null);\n  useEffect(() => {\n    console.log(\"Saving activities to localStorage:\", activities);\n    localStorage.setItem('activities', JSON.stringify(activities));\n  }, [activities]);\n  const handleArchiveActivity = index => {\n    const newActivities = [...activities];\n    newActivities[index].isArchived = !newActivities[index].isArchived;\n    if (newActivities[index].isArchived) {\n      newActivities[index].streak = 0;\n    }\n    setActivities(newActivities);\n  };\n  const handleUpdateStreak = index => {\n    const today = new Date().toDateString();\n    const needsContribution = !(activities[index].name === \"Fitness/Exercise\");\n    const newActivities = [...activities];\n    if (needsContribution) {\n      if (newActivities[index].lastUpdated !== today) {\n        const contribution = prompt(\"Enter streak contribution for today:\");\n        if (contribution) {\n          newActivities[index].streak++;\n          newActivities[index].lastUpdated = today;\n          newActivities[index].contributions.push({\n            date: today,\n            contribution\n          });\n          if (newActivities[index].streak > (newActivities[index].longestRecordedStreak || 0)) {\n            newActivities[index].longestRecordedStreak = newActivities[index].streak;\n          }\n          setActivities(newActivities);\n        }\n      } else {\n        alert(\"Streak already updated today.\");\n      }\n    } else {\n      newActivities[index].streak++;\n      newActivities[index].lastUpdated = today;\n      if (newActivities[index].streak > (newActivities[index].longestRecordedStreak || 0)) {\n        newActivities[index].longestRecordedStreak = newActivities[index].streak;\n      }\n      setActivities(newActivities);\n    }\n  };\n  const handleToggleFreezeActivity = index => {\n    const newActivities = [...activities];\n    newActivities[index].isFrozen = !newActivities[index].isFrozen;\n    setActivities(newActivities);\n  };\n  const handleDeleteStreak = index => {\n    console.log(`Delete activity at index ${index}`);\n    setActivities(activities.filter((_, i) => i !== index));\n  };\n  const handleViewActivity = index => {\n    setSelectedActivity(activities[index]);\n  };\n  const handleCompleteAllActivities = () => {\n    const today = new Date().toDateString();\n    const newActivities = activities.map(activity => {\n      if (activity.lastUpdated !== today) {\n        const needsContribution = !(activity.name === \"Fitness/Exercise\");\n        if (needsContribution) {\n          const contribution = prompt(`Enter streak contribution for ${activity.name} today:`);\n          if (contribution) {\n            return {\n              ...activity,\n              streak: activity.streak + 1,\n              lastUpdated: today,\n              contributions: [...activity.contributions, {\n                date: today,\n                contribution\n              }]\n            };\n          }\n        } else {\n          return {\n            ...activity,\n            streak: activity.streak + 1,\n            lastUpdated: today\n          };\n        }\n      }\n      return activity;\n    });\n    setActivities(newActivities);\n  };\n  const handleAddActivity = (name, streak) => {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - streak);\n    setActivities([...activities, {\n      name,\n      streak,\n      startDate: startDate.toDateString(),\n      contributions: [],\n      isFrozen: false,\n      isArchived: false,\n      // Initialize the isArchived property\n      longestRecordedStreak: streak // Set initial longest streak\n    }]);\n  };\n  const goBack = () => {\n    setSelectedActivity(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: selectedActivity ? /*#__PURE__*/_jsxDEV(ActivityDetails, {\n      activity: selectedActivity,\n      goBack: goBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Streak Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ActivityForm, {\n        onAddActivity: handleAddActivity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCompleteAllActivities,\n        children: \"Complete All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Active Activities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ActivityList, {\n        activities: activities.filter(activity => !activity.isArchived),\n        onUpdateStreak: handleUpdateStreak,\n        onToggleFreezeActivity: handleToggleFreezeActivity,\n        onDeleteStreak: handleDeleteStreak,\n        onArchiveActivity: handleArchiveActivity,\n        onViewActivity: handleViewActivity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Archived Activities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ActivityList, {\n        activities: activities.filter(activity => activity.isArchived),\n        onUpdateStreak: handleUpdateStreak,\n        onUnarchiveActivity: handleArchiveActivity,\n        onDeleteStreak: handleDeleteStreak,\n        onViewActivity: handleViewActivity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"KXd7sYNXgm/FvJckMV9KJpuEM9g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ActivityList","ActivityDetails","ActivityForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","activities","setActivities","storedActivities","JSON","parse","localStorage","getItem","selectedActivity","setSelectedActivity","console","log","setItem","stringify","handleArchiveActivity","index","newActivities","isArchived","streak","handleUpdateStreak","today","Date","toDateString","needsContribution","name","lastUpdated","contribution","prompt","contributions","push","date","longestRecordedStreak","alert","handleToggleFreezeActivity","isFrozen","handleDeleteStreak","filter","_","i","handleViewActivity","handleCompleteAllActivities","map","activity","handleAddActivity","startDate","setDate","getDate","goBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddActivity","onClick","onUpdateStreak","onToggleFreezeActivity","onDeleteStreak","onArchiveActivity","onViewActivity","onUnarchiveActivity","_c","$RefreshReg$"],"sources":["/Users/seanfiscus/Desktop/streak-tracker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ActivityList from './components/ActivityList';\nimport ActivityDetails from './components/ActivityDetails';\nimport ActivityForm from './components/ActivityForm';\n\nimport './App.css';\n\nfunction App() {\n    const [activities, setActivities] = useState(() => {\n        const storedActivities = JSON.parse(localStorage.getItem('activities'));\n        return storedActivities || [];\n    });\n\n    const [selectedActivity, setSelectedActivity] = useState(null);\n\n    useEffect(() => {\n        console.log(\"Saving activities to localStorage:\", activities);\n        localStorage.setItem('activities', JSON.stringify(activities));\n    }, [activities]);\n\n    const handleArchiveActivity = (index) => {\n        const newActivities = [...activities];\n        newActivities[index].isArchived = !newActivities[index].isArchived;\n        if (newActivities[index].isArchived) {\n            newActivities[index].streak = 0;\n        }\n        setActivities(newActivities);\n    };\n\n    const handleUpdateStreak = (index) => {\n        const today = new Date().toDateString();\n        const needsContribution = !(activities[index].name === \"Fitness/Exercise\");\n\n        const newActivities = [...activities];\n\n        if (needsContribution) {\n            if (newActivities[index].lastUpdated !== today) {\n                const contribution = prompt(\"Enter streak contribution for today:\");\n                if (contribution) {\n                    newActivities[index].streak++;\n                    newActivities[index].lastUpdated = today;\n                    newActivities[index].contributions.push({ date: today, contribution });\n\n                    if (newActivities[index].streak > (newActivities[index].longestRecordedStreak || 0)) {\n                        newActivities[index].longestRecordedStreak = newActivities[index].streak;\n                    }\n\n                    setActivities(newActivities);\n                }\n            } else {\n                alert(\"Streak already updated today.\");\n            }\n        } else {\n            newActivities[index].streak++;\n            newActivities[index].lastUpdated = today;\n\n            if (newActivities[index].streak > (newActivities[index].longestRecordedStreak || 0)) {\n                newActivities[index].longestRecordedStreak = newActivities[index].streak;\n            }\n\n            setActivities(newActivities);\n        }\n    };\n\n    const handleToggleFreezeActivity = (index) => {\n        const newActivities = [...activities];\n        newActivities[index].isFrozen = !newActivities[index].isFrozen;\n        setActivities(newActivities);\n    };\n\n    const handleDeleteStreak = (index) => {\n        console.log(`Delete activity at index ${index}`);\n        setActivities(activities.filter((_, i) => i !== index));\n    };\n\n    const handleViewActivity = (index) => {\n        setSelectedActivity(activities[index]);\n    };\n\n    const handleCompleteAllActivities = () => {\n        const today = new Date().toDateString();\n        const newActivities = activities.map(activity => {\n            if (activity.lastUpdated !== today) {\n                const needsContribution = !(activity.name === \"Fitness/Exercise\");\n                if (needsContribution) {\n                    const contribution = prompt(`Enter streak contribution for ${activity.name} today:`);\n                    if (contribution) {\n                        return {\n                            ...activity,\n                            streak: activity.streak + 1,\n                            lastUpdated: today,\n                            contributions: [...activity.contributions, { date: today, contribution }]\n                        };\n                    }\n                } else {\n                    return {\n                        ...activity,\n                        streak: activity.streak + 1,\n                        lastUpdated: today\n                    };\n                }\n            }\n            return activity;\n        });\n\n        setActivities(newActivities);\n    };\n\n    const handleAddActivity = (name, streak) => {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - streak);\n\n        setActivities([\n            ...activities,\n            {\n                name,\n                streak,\n                startDate: startDate.toDateString(),\n                contributions: [],\n                isFrozen: false,\n                isArchived: false, // Initialize the isArchived property\n                longestRecordedStreak: streak // Set initial longest streak\n            },\n        ]);\n    };\n\n    const goBack = () => {\n        setSelectedActivity(null);\n    };\n\n    return (\n        <div className=\"container\">\n            {selectedActivity ? (\n                <ActivityDetails activity={selectedActivity} goBack={goBack} />\n            ) : (\n                <>\n                    <h2>Streak Tracker</h2>\n                    <ActivityForm onAddActivity={handleAddActivity} />\n                    <button onClick={handleCompleteAllActivities}>Complete All</button>\n                    <h2>Active Activities</h2>\n                    <ActivityList\n                        activities={activities.filter(activity => !activity.isArchived)}\n                        onUpdateStreak={handleUpdateStreak}\n                        onToggleFreezeActivity={handleToggleFreezeActivity}\n                        onDeleteStreak={handleDeleteStreak}\n                        onArchiveActivity={handleArchiveActivity}\n                        onViewActivity={handleViewActivity}\n                    />\n                    <h2>Archived Activities</h2>\n                    <ActivityList\n                        activities={activities.filter(activity => activity.isArchived)}\n                        onUpdateStreak={handleUpdateStreak}\n                        onUnarchiveActivity={handleArchiveActivity}\n                        onDeleteStreak={handleDeleteStreak}\n                        onViewActivity={handleViewActivity}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}